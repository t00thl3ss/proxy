{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Template to build a OpenVPN and Proxy",
    "Metadata": {

    },
    "Parameters": {
      "InstanceAMI" : {
          "Description" : "The EC2 AMI id to use for the OpenVPN service. Expects an Amazon Linux box, but may work with others.",
          "Type" : "String",
          "Default" : "ami-b5a7ea85"
      },
      "MinSize" : {
          "Description" : "The minimum size of the VPN auto scaling group. Can be used for horizontal scaling.",
          "Type" : "String",
          "Default" : "1"
      },
      "MaxSize" : {
          "Description" : "The maximum size of the VPN auto scaling group. Can be used for horizontal scaling. Always keep +1 over the MinSize.",
          "Type" : "String",
          "Default" : "2"
      },
      "ScalingPolicy" : {
          "Description" : "Set to true to use time based scaling options. This allows you to scale your VPN infrastructure based on your business hours.",
          "Type" : "String",
          "Default" : "false"
      },
      "ScaleDownMinSize" : {
          "Description" : "The size of the VPN auto scaling group during scaledown policy hours. Can be used for horizontal scaling.",
          "Type" : "String",
          "Default" : "1"
      },
      "ScaleDownMaxSize" : {
          "Description" : "The size of the VPN auto scaling group during scaledown policy hours. Can be used for horizontal scaling. Always keep +1 over the MinSize.",
          "Type" : "String",
          "Default" : "2"
      },
      "ScaleDownTime" : {
          "Description" : "The cron formated time for the scaling event.",
          "Type" : "String",
          "Default" : "0 1 * * *"
      },
      "ScaleUpTime" : {
          "Description" : "The cron formated time for the scaling event.",
          "Type" : "String",
          "Default" : "0 14 * * *"
      },
      "InstanceType" : {
          "Description" : "EC2 instance type. If having network speed / consistency issues, then increase this value.",
          "Type" : "String",
          "Default" : "t2.small",
          "AllowedValues" : [ "t2.micro", "t2.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge"],
          "ConstraintDescription" : "must be a valid EC2 instance type."
      },
      "SSHKeyPair" : {
          "Description" : "The SSH Key Pair to use with the auto scaling group.",
          "Type" : "AWS::EC2::KeyPair::KeyName"
      },
      "S3Bucket" : {
          "Description" : "The S3 bucket to pull the OpenVPN configuration from.",
          "Type" : "String"
      },
      "S3Region" : {
          "Description" : "The S3 region for the S3 bucket used to pull the OpenVPN configuration from. Use if applicable.",
          "Type" : "String"
      },
      "Key" : {
          "Description" : "Region / Key word, used to select which OpenVPN configuration to use.",
          "Type" : "String"
      },
      "VpcCIDR" : {
          "Description" : "The IP Address space used by this VPC. Changing the VPC-id issues a replacement of the stack.",
          "Type" : "AWS::EC2::VPC::Id",
          "Default" : "10.1.0.0/24"
      },
      "VpnSubnet1CIDR" : {
          "Description" : "The IP Address space used by subnet 1. Changing the subnet-id issues a replacement of the stack.",
          "Type" : "AWS::EC2::Subnet::Id",
          "Default" : "10.1.0.0/26"
      },
      "VpnSubnet2CIDR" : {
          "Description" : "The IP Address space used by subnet 1. Changing the subnet-id issues a replacement of the stack.",
          "Type" : "AWS::EC2::Subnet::Id",
          "Default" : "10.1.0.64/26"
      },
      "Subnet2ID" : {
          "Description" : "The IP Address space used by subnet 2. Changing the subnet-id issues a replacement of the stack.",
          "Type" : "AWS::EC2::Subnet::Id"
      },
      "Subnet3ID" : {
          "Description" : "The IP Address space used by subnet 3. Changing the subnet-id issues a replacement of the stack.",
          "Type" : "AWS::EC2::Subnet::Id"
      },
      "Subnet1AZ" : {
          "Description" : "The availability zone used by subnet 1. Changing the AZ issues a replacement of the stack. Must match the AZ the subnet is actually in.",
          "Type" : "AWS::EC2::AvailabilityZone::Name"
      },
      "Subnet2AZ" : {
          "Description" : "The availability zone used by subnet 2. Changing the AZ issues a replacement of the stack. Must match the AZ the subnet is actually in.",
          "Type" : "AWS::EC2::AvailabilityZone::Name"
      },
      "Subnet3AZ" : {
          "Description" : "The availability zone used by subnet 3. Changing the AZ issues a replacement of the stack. Must match the AZ the subnet is actually in.",
          "Type" : "AWS::EC2::AvailabilityZone::Name"
      }
  },

    },
    "Mappings": {

    },
    "Conditions": {
      "UseScheduledScaling" : {"Fn::Equals" : [{"Ref" : "ScalingPolicy"}, "true"]}

    },
    "Resources": {
      "VPC" : {
        "Type" : "AWS::EC2::VPC",
        "Properties" : {
          "CidrBlock" : { "Ref": "VpcCIDR" },
          "EnableDnsSupport" : true,
          "EnableDnsHostnames" : true,
          "InstanceTenancy" : "default"
        }
      },
      "VpnSubnet1" : {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": { "Ref": "VPC" },
          "CidrBlock": { "Ref": "VpnSubnet1CIDR" }
      },
      "VpnSubnet2" : {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": { "Ref": "VPC" },
          "CidrBlock": { "Ref": "VpnSubnet2CIDR" }
      },
      "VpnRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": { "Ref": "VPC" }
        }

    },
    "VpnInternetRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": { "Ref": "VpnRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },
    "VpnSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": [{ "Ref": "VpnSubnet1" }, { "Ref": "VpnSubnet2" }],
        "RouteTableId": { "Ref": "VpnRouteTable" }
      }
    },
    "VpnNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": { "Ref": "VPC" }
      }
    },
    "InboundHttpsVpnNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "VpnNetworkAcl" },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "443", "To": "443" }
      }
    },
    "InboundUdpVpnNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "VpnNetworkAcl" },
        "RuleNumber": "101",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "1925", "To": "1925" }
      }
    },
    "InboundSshVpnNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": { "Ref": "VpnNetworkAcl" },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "22", "To": "22" }
      }
    },
    "InboundAdmVpnNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "VpnNetworkAcl" },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "943", "To": "943" }
      }
    },
    "OutboundVpnNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "VpnNetworkAcl" },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": { "From": "32768", "To": "65535" }
      }
    },
    "VpnSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": [{ "Ref": "VpnSubnet1" }, { "Ref": "VpnSubnet2" }],
        "NetworkAclId": { "Ref": "VpnNetworkAcl" }
      }
    },
    "ElbSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" :
        {
            "GroupDescription" : { "Ref" : "AWS::StackName"},
            "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "1925", "ToPort" : "1925", "CidrIp" : "0.0.0.0/0"} ],
            "VpcId" : { "Ref" : "VpcID"},
            "Tags" : [ { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName"} } ]
        }
    },
    "Ec2InstanceSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" :
        {
            "GroupDescription" : { "Ref" : "AWS::StackName"},
            "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "1925", "ToPort" : "1925", "SourceSecurityGroupId" : {
                "Fn::GetAtt": [
                    "ElbSecurityGroup",
                    "GroupId"
                ]
            }} ],
            "VpcId" : { "Ref" : "VpcID"},
            "Tags" : [ { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName"} } ]
        }
    },
    "LoadBalancer" : {
        "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties" : {
            "CrossZone" : "true",
            "Scheme" : "internet-facing",
            "SecurityGroups" : [ { "Ref" : "ElbSecurityGroup" } ],
            "Subnets" : [{ "Ref" : "VpnSubnet1"},{ "Ref" : "VpnSubnet2"}],
            "Listeners" : [ { "LoadBalancerPort" : "1925", "InstancePort" : "1925", "Protocol" : "TCP" } ],
            "HealthCheck" : {
                "Target" : "TCP:1925",
                "HealthyThreshold" : "3",
                "UnhealthyThreshold" : "2",
                "Interval" : "10",
                "Timeout" : "5"
            },
            "Tags" : [ { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName"} } ]
        }
    },
    "AutoScalingGroup" : {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
            "VPCZoneIdentifier" : [{ "Ref" : "VpnSubnet1"},{ "Ref" : "VpnSubnet2"}],
            "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
            "MinSize" : {"Ref":"MinSize"},
            "MaxSize" : {"Ref":"MaxSize"},
            "LoadBalancerNames" : [ { "Ref" : "LoadBalancer" } ],
            "Tags" : [
                { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName"}, "PropagateAtLaunch" : true }
            ]
        },
        "CreationPolicy" : {
            "ResourceSignal" : {
                "Count" : "1",
                "Timeout" : "PT15M"
            }
        },
        "UpdatePolicy": {
            "AutoScalingRollingUpdate": {
                "MinInstancesInService": "1",
                "MaxBatchSize": "1",
                "PauseTime" : "PT5M",
                "WaitOnResourceSignals": "true"
            }
        }
    },










    "VpnSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "VPN server security group.",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort":  "443", "ToPort":  "443", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "udp", "FromPort": "1925", "ToPort": "1194", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort":   "22", "ToPort":   "22", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort":  "943", "ToPort":  "943", "CidrIp": "0.0.0.0/0" }
        ]
      }
    },
    "VpnEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "VpnInstance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "VpnEIP",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "RegionMap", {"Ref": "AWS::Region" }, "AMI" ]},
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "SubnetId": { "Ref": "VpnSubnet1" },
        "SecurityGroupIds": [{ "Ref": "VpnSecurityGroup" }],
        "Tags": [{ "Key": "Name", "Value": "openVPN server" }],
        "UserData": {
          "Fn::Base64": { "Fn::Join": [ "", [ "public_hostname=", {"Ref": "VpnEIP"} ]] }
        }
      }
    },
    "VpnEipAssociation": {
      "Type": "AWS::EC2::EIPAssociation",
      "DependsOn": "VpnInstance",
      "Properties": {
        "AllocationId": { "Fn::GetAtt": [ "VpnEIP", "AllocationId" ] },
        "InstanceId": { "Ref": "VpnInstance" }
      }
    },
    "Outputs": {
      "OpenVPNServerAdminURL" : {
        "Value" : { "Fn::Join" : ["", ["https://", { "Ref" : "VpnEIP" }, ":943/admin" ]] },
        "Description" : "openVPN Server Admin URL"
      },
      "OpenVPNServerURL" : {
        "Value" : { "Fn::Join" : ["", ["https://", { "Ref" : "VpnEIP" } ]] },
        "Description" : "openVPN Server URL"
      }
  }

    }
}
